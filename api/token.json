import { google } from "googleapis";

export async function POST(req) {
  try {
    const calendar = google.calendar("v3");

    const auth = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.REDIRECT_URI
    );

    // Token guardado no ambiente (Make ou Vercel)
    const token = JSON.parse(process.env.GOOGLE_TOKEN);
    auth.setCredentials(token);

    const agora = new Date();
    const fimSemana = new Date();
    fimSemana.setDate(agora.getDate() + 7);

    const res = await calendar.events.list({
      calendarId: process.env.GOOGLE_CALENDAR_ID,
      auth,
      timeMin: agora.toISOString(),
      timeMax: fimSemana.toISOString(),
      singleEvents: true,
      orderBy: "startTime",
    });

    const eventos = res.data.items || [];

    // Horário das 09h às 18h em blocos de 1h
    const agenda = [];
    const dias = {};

    for (let i = 0; i < 7; i++) {
      const dia = new Date();
      dia.setDate(agora.getDate() + i);
      const data = dia.toISOString().split("T")[0];
      dias[data] = Array.from({ length: 9 }).map((_, idx) => {
        const hora = 9 + idx;
        const hIni = String(hora).padStart(2, "0") + ":00";
        const hFim = String(hora + 1).padStart(2, "0") + ":00";
        return { data, inicio: hIni, fim: hFim, status: "livre" };
      });
    }

    eventos.forEach(ev => {
      const data = ev.start.dateTime || ev.start.date;
      const horaInicio = ev.start.dateTime?.split("T")[1].slice(0, 5);
      const horaFim = ev.end.dateTime?.split("T")[1].slice(0, 5);
      const dataKey = data.split("T")[0];

      if (dias[dataKey]) {
        dias[dataKey].forEach(slot => {
          if (
            slot.inicio >= horaInicio &&
            slot.inicio < horaFim
          ) {
            slot.status = "ocupado";
          }
        });
      }
    });

    Object.values(dias).forEach(slots => agenda.push(...slots));

    return new Response(JSON.stringify(agenda), {
      headers: { "Content-Type": "application/json" },
      status: 200
    });

  } catch (error) {
    console.error("Erro ao carregar eventos:", error);
    return new Response(JSON.stringify({ error: "Erro ao obter disponibilidade" }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}
